plugins {
    id 'java'
    id 'application'
    id('com.github.johnrengelman.shadow') version("6.1.0")
    id('maven-publish')
    id('signing')
}

group 'io.streamthoughts'
version '0.9.0-SNAPSHOT'

mainClassName = "io.streamthoughts.kafka.specs.Jikkou"

ext {
    minJavaVersion = JavaVersion.VERSION_17
}

/* Plugin Java */
java {
    sourceCompatibility = minJavaVersion
    targetCompatibility = minJavaVersion
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    // https://github.com/gradle/gradle/issues/2510
    if (JavaVersion.current().isJava9Compatible())
        options.compilerArgs << "--release" << minJavaVersion
}

/* Plugin Application */
application {
    applicationDefaultJvmArgs = ['-Dlogback.configurationFile=file:LOGBACK_APP_HOME/etc/logback.xml']
}

def junitVersion = '5.8.1'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation group: 'org.jetbrains', name: 'annotations', version: '23.0.0'
    implementation group: 'io.vavr', name: 'vavr', version: '1.0.0-alpha-3'
    implementation group: 'io.vavr', name: 'vavr-jackson', version: '1.0.0-alpha-3'
    implementation 'com.typesafe:config:1.4.1'
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.12.4'
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    implementation "org.apache.kafka:kafka-clients:3.0.0"
    implementation 'ch.qos.logback:logback-classic:1.2.7'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.13.0'
    implementation "com.googlecode.java-diff-utils:diffutils:1.3.0"
    implementation 'info.picocli:picocli:4.6.2'
    implementation 'com.hubspot.jinjava:jinjava:2.6.0'
    implementation group: 'org.reflections', name: 'reflections', version: '0.10.2'
}

task copyLicense {
    outputs.file new File("$buildDir/LICENSE")
    outputs.file new File("$buildDir/README.md")
    doLast {
        copy {
            from "LICENSE", "README.md"
            into "$buildDir"
        }
    }
}

task copyConfig(type: Copy) {
    from "src/main/resources/logback.xml"
    into "$buildDir/etc"
}

startScripts {
    unixStartScriptGenerator.template = resources.text.fromFile("scripts/unixScriptTemplate.txt")
    windowsStartScriptGenerator.template = resources.text.fromFile("scripts/windowsScriptTemplate.txt")
    doLast {
        unixScript.text = unixScript.text.replace('LOGBACK_APP_HOME', '\$APP_HOME')
        windowsScript.text = windowsScript.text.replace('LOGBACK_APP_HOME', '%~dp0..')
    }
}

distributions {
    main {
        contents {
            from(copyLicense)
            from(copyConfig) { into "etc" }
        }
    }
}

test {
    // Enable JUnit 5 (Gradle 4.6+).
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task printVersion {
    doLast {
        println project.version
    }
}

task printProjectName {
    doLast {
        println rootProject.name
    }
}

jar {
    manifest {
        attributes(
            "Main-Class": "$mainClassName",
            "Built-By": System.properties["user.name"],
            "Build-Jdk": "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            "Created-By": "Gradle ${gradle.gradleVersion}",
            "Implementation-Title": "Jikkou",
            "Implementation-Version": archiveVersion)
    }
}
shadowJar {
    archiveClassifier = 'all'
}

tasks.build.dependsOn tasks.shadowJar

publishing {
    repositories {
        maven {
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
            url = project.hasProperty('release') ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username = project.hasProperty('repository.oss.username') ? project.property('repository.oss.username') : ''
                password = project.hasProperty('repository.oss.password') ? project.property('repository.oss.password') : ''
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.streamthoughts'
            artifactId = 'jikkou'
            pom {
                name = 'Jikkou'
                description = 'A command-line tool to help you automate the management of the configurations that live on your Apache Kafka clusters.'
                url = 'https://github.com/streamthoughts/jikkou'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                organization {
                    name = 'streamthoughts'
                    url = 'https://www.streamthoughts.io'
                }
                developers {
                    developer {
                        organization = 'streamthoughts'
                        organizationUrl = 'https://www.streamthoughts.io'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/streamthoughts/jikkou.git'
                    developerConnection = 'scm:git:ssh://github.com/streamthoughts/jikkou.git'
                    url = 'https://github.com/streamthoughts/jikkou.git'
                }
            }
            from components.java
            artifact distZip
        }
    }
    signing {
        sign publishing.publications.mavenJava
        useGpgCmd()
    }

    javadoc {
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }
}

